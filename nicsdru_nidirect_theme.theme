<?php

/**
 * @file
 * Functions to support theming in the nicsdru_nidirect_theme theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Utility\Html;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_page_attachments_alter().
 */
function nicsdru_nidirect_theme_page_attachments_alter(array &$page) {

  // Attach layout builder styles for authenticated users.
  $userCurrent = \Drupal::currentUser();

  if ($userCurrent->isAuthenticated()) {
    $page['#attached']['library'][] = 'nicsdru_nidirect_theme/authenticated-styles';
  }
}

/**
 * Implements hook_preprocess_html().
 */
function nicsdru_nidirect_theme_preprocess_html(array &$variables) {

  $route = \Drupal::routeMatch()->getRouteName();

  switch ($route) {
    case "nidirect_gp.gp_search":
      // Set a body class on the GP practice search page.
      $variables['attributes']['class'][] = 'page-search';
      break;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function nicsdru_nidirect_theme_preprocess_page(array &$variables) {
  $layout_classes = ['grid', 'layout--main-n-side'];
  $search_layout_classes = ['grid', 'layout--side-n-main', 'search-content'];

  // Process node pages
  $node = Drupal::routeMatch()->getParameter('node');
  if (is_object($node) && !empty($node->bundle())) {
    switch ($node->bundle()) {
      case "article":
      case "application":
      case "gp_practice":
      case "health_condition":
      case "news":
      case "page":
        $variables['main_content_attr']->addClass($layout_classes);
        $variables['sidebar_second_attr']->addClass('ga-aside');
        break;

      case "contact":
        $variables['main_content_attr']->addClass($layout_classes);
        $variables['sidebar_second_attr']->addClass('ga-aside');
        break;
    }
  }

  // Process search view pages.
  $viewpage = \Drupal::routeMatch()->getParameter('view_id');
  if (isset($viewpage)) {
    switch ($viewpage) {
      case "health_conditions":
        $variables['main_content_attr']->addClass($search_layout_classes);
        if ($variables['content_wrapper_attr'] instanceof Attribute) {
          $variables['content_wrapper_attr']
            ->addClass('ga-main')
            ->setAttribute('role', 'presentation');
        }
        $variables['sidebar_first_attr']
          ->addClass('ga-aside')
          ->setAttribute('role', 'search')
          ->setAttribute('aria-label', t('filter search results'));
        break;

      case "publications":
        $variables['main_content_attr']->addClass($search_layout_classes);
        $variables['sidebar_first_attr']
          ->addClass('ga-aside')
          ->setAttribute('role', 'search')
          ->setAttribute('aria-label', t('filter search results'));
        break;

      case "search":
        $layout_classes[] = 'search-content';
        $variables['main_content_attr']->addClass('search-content');
        break;
    }
  }

  // Process pages based on routes.
  $route = \Drupal::routeMatch()->getRouteName();

  switch ($route) {
    // Contacts page uses multiple routes defined in nidirect_contacts module.
    case 'nidirect_contacts.default':
    case 'nidirect_contacts.letter':
      $layout_classes[] = 'search-content';
      $variables['main_content_attr']->addClass($layout_classes);
      if ($variables['content_wrapper_attr'] instanceof Attribute) {
        $variables['content_wrapper_attr']
          ->addClass('ga-main')
          ->setAttribute('role', 'presentation');
      }
      $variables['sidebar_second_attr']->addClass('ga-aside');
      break;

    // Site theme term pages.
    case 'entity.taxonomy_term.canonical':
      // Set the section css classes for theme taxonomy terms.
      if ($variables['term']->bundle() == "site_themes") {
        $taxonomy_classes = ['grid', 'layout--front'];
        $variables['main_content_attr']->addClass($taxonomy_classes);
        $variables['sidebar_second_attr']->addClass('section--popular');
      }
      break;

    // Node preview pages.
    // Ensure the side-bar in the node preview is visible to accurately
    // reflect how the published node will look.
    case 'entity.node.preview':
      $node_preview = \Drupal::routeMatch()->getParameter('node_preview');
      $node_type = $node_preview->getType();

      switch ($node_type) {
        case 'article':
        case 'news':
        case 'application':
        case 'landing_page':
        case 'page':
          // Render Related Content block.
          $related_block = Block::load('views_block__related_content_content_by_theme');
          $related_block_content = \Drupal::entityTypeManager()->getViewBuilder('block')->view($related_block);
          $variables['page']['sidebar_second'][] = $related_block_content;
          break;

        case 'news':
          // Render Latest news block.
          $news_block = Block::load('views_block__news_latest_news_block');
          $news_block_content = \Drupal::entityTypeManager()->getViewBuilder('block')->view($news_block);
          $variables['page']['sidebar_second'][] = $news_block_content;
          break;

        case 'health_condition':
          // Render Health Conditions search block.
          $health_condition_search_block = Block::load('exposedformhealth_conditionssearch_sidebar_2');
          $health_condition_search_block_content = \Drupal::entityTypeManager()->getViewBuilder('block')->view($health_condition_search_block);
          $variables['page']['sidebar_second'][] = $health_condition_search_block_content;

          // Render Health Conditions AtoZ block.
          $health_conditions_a2z_block = Block::load('healthconditionsatoz_sidebar_2');
          $health_conditions_a2z_block_content = \Drupal::entityTypeManager()->getViewBuilder('block')->view($health_conditions_a2z_block);
          $variables['page']['sidebar_second'][] = $health_conditions_a2z_block_content;

          // Render Health Conditions Related block.
          $health_conditions_related_block = Block::load('healthconditionsrelatedconditions');
          $health_conditions_related_block_content = \Drupal::entityTypeManager()->getViewBuilder('block')->view($health_conditions_related_block);
          $variables['page']['sidebar_second'][] = $health_conditions_related_block_content;
          break;

        default:
          break;
      }

      // Display Social links block on the listed entity types.
      if (in_array($node_type, [
        'application',
        'article',
        'contact',
        'embargoed_publication',
        'health_condition',
        'news',
        'application',
        'landing_page',
        'page',
        'publication',
      ])) {
        // Render Social Links block.
        $social_block = Block::load('originssocialsharing');
        $social_block_content = \Drupal::entityTypeManager()->getViewBuilder('block')->view($social_block);
        $variables['page']['bottom_banner'][] = $social_block_content;
      }

      // Add classes to main and sidebar regions.
      $variables['main_content_attr']->addClass($layout_classes);
      $variables['sidebar_second_attr']->addClass('ga-aside');

      break;

    // Health conditions A to Z letter page (see nidirect_health_conditions module).
    case 'nidirect_health_conditions.letter':
      $variables['main_content_attr']->addClass($search_layout_classes);
      if ($variables['content_wrapper_attr'] instanceof Attribute) {
        $variables['content_wrapper_attr']
          ->addClass('ga-main')
          ->setAttribute('role', 'presentation');
      }
      $variables['sidebar_first_attr']
        ->addClass('ga-aside')
        ->setAttribute('role', 'search')
        ->setAttribute('aria-label', t('filter search results'));
      break;

    default:
      break;
  }

  if (isset($variables['is_front']) && $variables['is_front'] == TRUE) {
    $front_classes = ['grid', 'layout--front'];
    $variables['main_content_attr']->addClass($front_classes);
    $variables['sidebar_second_attr']->addClass('section--popular');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nicsdru_nidirect_theme_form_node_preview_form_select_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Additional styles to the node preview form.
  unset($form['view_mode']);
  $form['backlink']['#options']['attributes']['class'] += ['btn-standard', 'call-to-action'];
}

/**
 * Implements hook_preprocess_node().
 */
function nicsdru_nidirect_theme_preprocess_node(array &$variables) {
  $variables['show_title'] = TRUE;

  switch ($variables['node']->getType()) {
    case "article":
    case "application":
    case "contact":
    case "news":
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('ga-main');
      break;

    case "featured_content_list":
      // Only show the title on the canonical node route.
      if (\Drupal::routeMatch()->getRouteName() != 'entity.node.canonical') {
        $variables['show_title'] = FALSE;
      }
      break;

    case "publication":
      // Change field label to 'Documents'.
      $variables['content']['field_attachment']['#title'] = t('Documents');
      break;

    case "landing_page":
    case "page":
      // Omit the title on these content types; causes trouble with search
      // indexing. Resolvable with either suitable block config or specific
      // node templates for these types.
      $variables['show_title'] = FALSE;
      break;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nicsdru_nidirect_theme_preprocess_block(array &$variables) {
  // Fine grained control over the title of the contacts page.
  if ($variables['plugin_id'] == 'page_title_block') {
    $this_route = \Drupal::routeMatch()->getRouteName();
    if ($this_route == 'nidirect_contacts.default') {
      // Is there a text search string?
      $search_string = \Drupal::request()->get('query_contacts_az');
      if (!empty($search_string)) {
        $variables['content']['#title'] = t('Contacts search');
      }
      else {
        $variables['content']['#title'] = t('Contacts');
      }
    }
    elseif ($this_route == 'nidirect_contacts.letter') {
      // A letter has been selected from the A-Z.
      $letter = \Drupal::routeMatch()->getParameter('letter');
      $variables['content']['#title'] = t('Contacts - under :letter', [':letter' => strtoupper($letter)]);
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function nicsdru_nidirect_theme_preprocess_page_title(&$variables) {

  // By default page titles are visible.
  $variables['title_visible'] = TRUE;

  // Preprocess node titles.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {

    // Landing pages have a boolean field to enable title visibility.
    if ($node->getType() == 'landing_page') {
      // Is the title visible?
      if ($node->field_enable_title->get(0)->value === '0') {
        $variables['title_visible'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function nicsdru_nidirect_theme_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'field_featured_content' && \Drupal::service('path.matcher')->isFrontPage()) {
    // Only show 3 items on the homepage.
    if (count($variables['items']) > 3) {
      $variables['items'] = array_slice($variables['items'], 0, 3);
    }
  }

  // Add a class to the anchor tag on application link fields & append the icon.
  if (isset($variables['element'])
    && $variables['element']['#field_name'] == 'field_link'
    && $variables['element']['#bundle'] == 'application'
  ) {
    foreach ($variables['items'] as $key => $item) {
      $icon = '<svg aria-hidden="true" class="ico ico-arrow-right"><use xlink:href="#arrow"></use></svg>';
      $title = $item['content']['#title'];
      $classes = ['btn', 'call-to-action'];

      $formattedTitle = Markup::create($title . $icon);

      $variables['items'][0]['content']['#title'] = $formattedTitle;
      $variables['items'][0]['content']['#url']->setOption('attributes', ['class' => $classes]);
    }
  }
  // Amend classes on the standard address field output.
  if (isset($variables['element'])
    && $variables['element']['#field_type'] == 'address'
  ) {
    for ($i = 0; $i < count($variables['items']); $i++) {
      $variables['items'][$i]["content"]["#prefix"] = '<p class="adr" translate="no">';
      if (($key = array_search('address-line1', $variables['items'][$i]['content']['address_line1']['#attributes']['class'])) !== FALSE) {
        unset($variables['items'][$i]['content']['address_line1']['#attributes']['class'][$key]);
      }
      $variables['items'][$i]['content']['address_line1']['#attributes']['class'][] = 'street-address';
      if (($key = array_search('address-line2', $variables['items'][$i]['content']['address_line2']['#attributes']['class'])) !== FALSE) {
        unset($variables['items'][$i]['content']['address_line2']['#attributes']['class'][$key]);
      }
      $variables['items'][$i]['content']['address_line2']['#attributes']['class'][] = 'street-address';
      $i++;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nicsdru_nidirect_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  // Force related info/More useful links fields to use the
  // related_info template.
  if ($variables['element']['#field_name'] === 'field_related_info') {
    $suggestions = ['field__field_related_info'];
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function nicsdru_nidirect_theme_preprocess_views_view(&$variables) {
  // Amend the role / labelling for search results pages.
  $search_classes = ['ga-main', 'card-deck', 'border-bottom', 'search-results'];
  if ($variables['id'] === 'publications' && $variables['display_id'] === 'search_page') {
    $search_classes = [
      'ga-main',
      'card-deck',
      'border-bottom',
      'search-results',
    ];
    if (!isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = [];
    }
    $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $search_classes);
    $variables['attributes']['role'] = 'region';
    $variables['attributes']['aria-label'] = t('search results');
  }
  if ($variables['view']->current_display == 'contacts_by_letter') {
    // Do not show search box if we are in a letter search.
    $route = \Drupal::routeMatch()->getRouteName();
    if ($route == "nidirect_contacts.letter") {
      $variables['exposed'] = NULL;
    }
  }
}

/**
 * Implements hook_preprocess_form().
 */
function nicsdru_nidirect_theme_preprocess_form(array &$variables) {
  switch ($variables['element']['#id']) {
    case "views-exposed-form-contacts-a-z-contacts-by-letter":
    case "views-exposed-form-contacts-contact-search":
    case "views-exposed-form-driving-instructors-driving-instructor-results":
    case "views-exposed-form-gp-practices-find-a-gp":
    case "views-exposed-form-health-conditions-search-page":
    case "views-exposed-form-publications-search-page":
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('search-form');
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('search-form--page');
      break;
  }
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function nicsdru_nidirect_theme_preprocess_taxonomy_term(array &$variables) {
  if ($variables['term']->getVocabularyId() != 'site_themes') {
    // We are only interested in the 'site themes' vocab.
    return;
  }
  $cache_tags = [];
  // Add a custom cache tag for this taxonomy term 'listing' page.
  $cache_tags[] = 'taxonomy_term_list:' . $variables['term']->id();
  // Add the standard taxonomy term cache tag as well.
  $cache_tags[] = 'taxonomy_term:' . $variables['term']->id();
  // Render the 'articles by term' view and process the results.
  $results = _render_articles_by_term($cache_tags);
  // Render the 'site subtopics' view and process the results.
  $results += _render_site_subtopics($cache_tags);
  // Sort entries alphabetically (regardless of type).
  ksort($results);
  // Return as an 'item_list' themed render array, with
  // cache tags set appropriately.
  $variables['information_services_output'] = [
    '#theme' => 'item_list',
    '#items' => $results,
    '#cache' => [
      'tags' => $cache_tags,
    ],
  ];
}

/**
 * Utility function to render 'articles by term' view.
 */
function _render_articles_by_term(&$cache_tags) {
  // Render the 'articles by term' view and process the results.
  $results = [];
  $articles_view = views_embed_view('articles_by_term', 'articles_by_term_embed');
  \Drupal::service('renderer')->renderRoot($articles_view);
  foreach ($articles_view['view_build']['#view']->result as $row) {
    // This will be a link to an article.
    $results[strtolower($row->_entity->getTitle())] = [
      '#type' => 'link',
      '#title' => $row->_entity->getTitle(),
      '#url' => Url::fromRoute('entity.node.canonical', ['node' => $row->nid]),
    ];
    // Add cache tag for each article.
    $cache_tags[] = 'node:' . $row->nid;
  }
  return $results;
}

/**
 * Utility function to render 'site subtopics' view.
 */
function _render_site_subtopics(&$cache_tags) {
  // Get a list of taxonomy terms that have been overridden
  // by campaigns.
  $terms_to_override = _render_campaign_list();
  // Render the 'site subtopics' view and process the results.
  $results = [];
  $subtopics_view = views_embed_view('site_subtopics', 'by_topic_simple_embed');
  \Drupal::service('renderer')->renderRoot($subtopics_view);
  foreach ($subtopics_view['view_build']['#view']->result as $row) {
    // Do we need to override?
    if (array_key_exists($row->tid, $terms_to_override)) {
      // This will be a link to a campaign (landing page).
      $results[strtolower($terms_to_override[$row->tid]['#title'])] = $terms_to_override[$row->tid];
      continue;
    }
    // This will be a link to another taxonomy page.
    $results[strtolower($row->_entity->getName())] = [
      '#type' => 'link',
      '#title' => $row->_entity->getName(),
      '#url' => Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $row->tid]),
    ];
    // Add cache tag for each listed term.
    $cache_tags[] = 'taxonomy_term:' . $row->tid;
  }
  return $results;
}

/**
 * Utility function to render 'campaign list' view.
 */
function _render_campaign_list() {
  // Render the 'campaign list' view to see which taxonomy terms
  // have been overridden.
  $campaigns_view = views_embed_view('articles_by_term', 'campaigns_embed');
  \Drupal::service('renderer')->renderRoot($campaigns_view);
  $terms_to_override = [];
  // Store taxonomy term tids that are overridden
  // by campaigns.
  foreach ($campaigns_view['view_build']['#view']->result as $row) {
    if (isset($row->_entity->get('field_subtheme')->target_id)) {
      $terms_to_override[$row->_entity->get('field_subtheme')->target_id] = [
        '#type' => 'link',
        '#title' => $row->_entity->getTitle(),
        '#url' => Url::fromRoute('entity.node.canonical', ['node' => $row->nid]),
      ];
    }
  }
  return $terms_to_override;
}
