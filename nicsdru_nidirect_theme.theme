<?php

/**
 * @file
 * Functions to support theming in the nicsdru_nidirect_theme theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

require_once __DIR__ . '/inc/preprocess.inc';

/**
 * Implements hook_page_attachments_alter().
 */
function nicsdru_nidirect_theme_page_attachments_alter(array &$page) {

  // Attach layout builder styles for authenticated users.
  $userCurrent = \Drupal::currentUser();

  if ($userCurrent->isAuthenticated()) {
    $page['#attached']['library'][] = 'nicsdru_nidirect_theme/authenticated-styles';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nicsdru_nidirect_theme_form_node_preview_form_select_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Additional styles to the node preview form.
  unset($form['view_mode']);
  $form['backlink']['#options']['attributes']['class'] += [
    'btn-standard',
    'call-to-action',
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nicsdru_nidirect_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  // Force related info/More useful links fields to use the
  // related_info template.
  if ($variables['element']['#field_name'] === 'field_related_info') {
    $suggestions = ['field__field_related_info'];
  }
}

/**
 * Utility function to render 'articles by term' view.
 */
function _render_articles_by_term(&$cache_tags) {
  // Render the 'articles by term' view and process the results.
  $results = [];
  $articles_view = views_embed_view('articles_by_term', 'articles_by_term_embed');
  \Drupal::service('renderer')->renderRoot($articles_view);
  foreach ($articles_view['view_build']['#view']->result as $row) {
    // This will be a link to an article.
    $results[strtolower($row->_entity->getTitle())] = [
      '#type' => 'link',
      '#title' => $row->_entity->getTitle(),
      '#url' => Url::fromRoute('entity.node.canonical', ['node' => $row->nid]),
    ];
    // Add cache tag for each article.
    $cache_tags[] = 'node:' . $row->nid;
  }
  return $results;
}

/**
 * Utility function to render 'site subtopics' view.
 */
function _render_site_subtopics(&$cache_tags) {
  // Get a list of taxonomy terms that have been overridden
  // by campaigns.
  $terms_to_override = _render_campaign_list();
  // Render the 'site subtopics' view and process the results.
  $results = [];
  $subtopics_view = views_embed_view('site_subtopics', 'by_topic_simple_embed');
  \Drupal::service('renderer')->renderRoot($subtopics_view);
  foreach ($subtopics_view['view_build']['#view']->result as $row) {
    // Do we need to override?
    if (array_key_exists($row->tid, $terms_to_override)) {
      // This will be a link to a campaign (landing page).
      $results[strtolower($terms_to_override[$row->tid]['#title'])] = $terms_to_override[$row->tid];
      continue;
    }
    // This will be a link to another taxonomy page.
    $results[strtolower($row->_entity->getName())] = [
      '#type' => 'link',
      '#title' => $row->_entity->getName(),
      '#url' => Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $row->tid]),
    ];
    // Add cache tag for each listed term.
    $cache_tags[] = 'taxonomy_term:' . $row->tid;
  }
  return $results;
}

/**
 * Utility function to render 'campaign list' view.
 */
function _render_campaign_list() {
  // Render the 'campaign list' view to see which taxonomy terms
  // have been overridden.
  $campaigns_view = views_embed_view('articles_by_term', 'campaigns_embed');
  \Drupal::service('renderer')->renderRoot($campaigns_view);
  $terms_to_override = [];
  // Store taxonomy term tids that are overridden
  // by campaigns.
  foreach ($campaigns_view['view_build']['#view']->result as $row) {
    if (isset($row->_entity->get('field_subtheme')->target_id)) {
      $terms_to_override[$row->_entity->get('field_subtheme')->target_id] = [
        '#type' => 'link',
        '#title' => $row->_entity->getTitle(),
        '#url' => Url::fromRoute('entity.node.canonical', ['node' => $row->nid]),
      ];
    }
  }
  return $terms_to_override;
}
