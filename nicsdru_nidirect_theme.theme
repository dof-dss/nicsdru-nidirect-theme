<?php

/**
 * @file
 * Functions to support theming in the nicsdru_nidirect_theme theme.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function nicsdru_nidirect_theme_preprocess_page(array &$variables) {
  // Links for: Twitter, Facebook, Youtube and RSS.
  $links['twitter'] = Link::fromTextAndUrl(t('Twitter'),
    Url::fromUri(theme_get_setting('nidirect_sst_twitter'), [
      'attributes' => ['title' => t('Twitter')]
    ]))->toRenderable();
  $links['fb'] = Link::fromTextAndUrl(t('Facebook'),
    Url::fromUri(theme_get_setting('nidirect_sst_fb'), [
      'attributes' => ['title' => t('Facebook')]
    ]))->toRenderable();
  $links['youtube'] = Link::fromTextAndUrl(t('YouTube'),
    Url::fromUri(theme_get_setting('nidirect_sst_youtube'), [
      'attributes' => ['title' => t('YouTube')]
    ]))->toRenderable();

  // RSS path might be internal.
  $rss_url = theme_get_setting('nidirect_sst_rss');
  if (preg_match('/^http/', $rss_url) == FALSE) {
    // Strip leading / if present.
    $rss_url = ltrim($rss_url, '/');
    $rss_url = 'internal:/' . $rss_url;
  }

  $links['rss'] = Link::fromTextAndUrl(t('RSS'),
    Url::fromUri($rss_url, [
      'attributes' => ['title' => t('RSS')]
    ]))->toRenderable();

  // Add to primary menu region.
  $variables['page']['primary_menu']['social_links'] = $links;

  // Add to footer region.
  $variables['page']['footer']['social_links'] = $links;
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function nicsdru_nidirect_theme_form_system_theme_settings_alter(&$form, FormStateInterface &$form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  // Add a theme settings group to gather social media link URLs for
  // presentation in the site header/footer regions.
  $form['nidirect_sst'] = [
    '#type' => 'details',
    '#title' => t('Social media links'),
    '#open' => TRUE,
    '#description' => t('Add social media platform details here.'),
  ];
  $form['nidirect_sst']['nidirect_sst_twitter'] = [
    '#type'          => 'textfield',
    '#title'         => t('Twitter'),
    '#default_value' => theme_get_setting('nidirect_sst_twitter'),
    '#placeholder' => 'Enter a URL, such as https://twitter.com/yourorg',
  ];
  $form['nidirect_sst']['nidirect_sst_facebook'] = [
    '#type'          => 'textfield',
    '#title'         => t('Facebook'),
    '#default_value' => theme_get_setting('nidirect_sst_facebook'),
    '#placeholder' => 'Enter a URL, such as https://facebook.com/yourorg',
  ];
  $form['nidirect_sst']['nidirect_sst_youtube'] = [
    '#type'          => 'textfield',
    '#title'         => t('YouTube'),
    '#default_value' => theme_get_setting('nidirect_sst_youtube'),
    '#placeholder' => 'Enter a URL, such as https://youtube.com/yourorg',
  ];
  $form['nidirect_sst']['nidirect_sst_rss'] = [
    '#type'          => 'textfield',
    '#title'         => t('RSS'),
    '#default_value' => theme_get_setting('nidirect_sst_rss'),
    '#placeholder' => 'Enter a URL, such as https://example.com/rss.xml',
  ];
}

/**
 * Implements hook_preprocess_field().
 */
function nicsdru_nidirect_theme_preprocess_field(&$variables) {
  // Implement audit link.
  if (isset($variables['element'])
    && isset($variables['element']['#entity_type'])
    && ($variables['element']['#entity_type'] == 'node')
  ) {
    // We are only interested in certain content types.
    $content_type = $variables['element']['#bundle'];
    switch ($content_type) {
      case 'health_condition':
        _build_audit_link('health_condition', $variables);
        break;

      case 'article':
      case 'contact':
      case 'page':
        _build_audit_link('article', $variables);
        break;
    }
  }
}

/**
 * Top level function to build audit links.
 */
function _build_audit_link($type, &$variables) {
  // Only start this processing if the 'nidirect_workflow'
  // module is installed.
  if (\Drupal::service('module_handler')->moduleExists('nidirect_workflow')) {
    // Get the current node.
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!empty($node)) {
      $nid = $node->id();
      if (!empty($nid)) {
        if ($type == 'health_condition') {
          $variables['audit_link'] = _audit_link($type, $node->get('field_next_review_date')->value, $nid);
        }
        else {
          // This will be an article, contact or page.
          $variables['audit_link'] = _audit_link($type, $node->get('field_next_audit_due')->value, $nid);
        }
      }
    }
  }
}

/**
 * Utility function to build the audit link html.
 */
function _audit_link($type, $dt, $nid) {
  if (strtotime($dt) < \Drupal::time()->getCurrentTime()) {
    // Next review date is in the past,
    // so this node is due for audit - display node edit link
    // (if the user is allowed to see it).
    $account = User::load(\Drupal::currentUser()->id());
    if ($account->hasPermission('audit content')) {
      // Retrieve audit text from config.
      $audit_button_text = \Drupal::config('nidirect_workflow.auditsettings')->get('audit_button_text');
      $audit_button_hover_text = \Drupal::config('nidirect_workflow.auditsettings')->get('audit_button_hover_text');
      // Set up common attributes for links.
      $options = [
        'attributes' => [
          'rel' => 'nofollow',
          'title' => $audit_button_hover_text,
          'class' => 'audit_link',
        ],
      ];
      $link_object = NULL;
      if ($type == 'health_condition') {
        // For health conditions, just send the user to the node edit
        // form, where they can set the 'next review date' to a date
        // in the future to remove this node from the 'needs audit' view.
        $link_object = Link::createFromRoute($audit_button_text, 'entity.node.edit_form', ['node' => $nid], $options);
      }
      else {
        // For articles, contacts and pages send the user
        // to the 'content audit' page.
        $link_object = Link::createFromRoute($audit_button_text, 'nidirect_workflow.audit_controller_content_audit', ['nid' => $nid], $options);
      }
      if ($link_object) {
        // Return render array.
        return $link_object->toRenderable();
      }
      else {
        return "";
      }
    }
  }
}
