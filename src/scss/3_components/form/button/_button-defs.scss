/*
 * @file
 * Provides some base definitions that are common among button type elements.
 */



@mixin btn($size: default, $arrow-direction: none, $arrow-colour: white) {

  display: inline-block;
  border: 1px solid transparent;
  border-radius: 0;
  text-align: center;
  text-decoration: none !important;
  background-repeat: no-repeat;
  background-position-y: center;
  appearance: none;

  &:link,
  &:visited {
    color: $white;
  }

  &:focus {
    outline: 3px solid #000;
  }

  &:hover {
    text-decoration: none;
  }

  &:active {
    outline: 0;
  }

  @if $arrow-direction {
    @if $arrow-direction == right {
      @if $arrow-colour == black {
        background-image: resolve('arrow_forward_black.svg');
      }
      @else {
        background-image: resolve('arrow_forward_white.svg');
      }
    }
    @else if $arrow-direction == left {
      @if $arrow-colour == black {
        background-image: resolve('arrow_back_black.svg');
      }
      @else {
        background-image: resolve('arrow_back_white.svg');
      }
    }
  }

  @if $size == small {
    @include responsive-typo-map($btn-small);
    @include _btn(4.2rem, 3.2rem, (.4rem .8rem), $arrow-direction);
    @include breakpoint($tab) {
      @include _btn(10rem, 3.6rem, (.4rem .9rem), $arrow-direction);
    }
  }
  @else if $size == medium {
    @include responsive-typo-map($btn-medium);
    @include _btn(125px, 4.4rem, (.7rem 1.2rem), $arrow-direction);
    @include breakpoint($tab) {
      @include _btn(125px, 4.5rem, (.6rem 1.8rem), $arrow-direction);
    }
  }
  @else if $size == 'large' {
    @include responsive-typo-map($btn-large);
    @include _btn(150px, 4.8rem, (.7rem 1.6rem), $arrow-direction);
    @include breakpoint($tab) {
      @include _btn(150px, 5.4rem, (.8rem 1.8rem), $arrow-direction);
    }
  }
  @else {
    @include responsive-typo-map($btn-default);
    @include _btn(100px, 4rem, (.8rem 1.2rem), $arrow-direction);
    @include breakpoint($tab) {
      @include _btn(120px, 4.5rem, (.8rem 1.5rem), $arrow-direction);
    }
  }
}

@mixin btn-color($bg-color: $dark-grey, $border-color: $bg-color, $txt-color: $white, $scheme: 'dark') {

  $bg-color-hover: darken($bg-color, 5%);
  $bg-color-active: darken($bg-color, 8%);
  $bg-color-focus: $bg-color-active;
  $border-color-hover: darken($border-color, 5%);
  $border-color-active: darken($border-color, 10%);
  $border-color-focus: darken($border-color, 5%);

  @if($scheme == 'light') {
    $bg-color-hover: lighten($bg-color, 5%);
    $bg-color-active: darken($bg-color, 3%);
    $bg-color-focus: $bg-color-active;
    $border-color-hover: darken($border-color, 5%);
    $border-color-active: darken($border-color, 5%);
    $border-color-focus: darken($border-color, 5%);
  }

  background-color: $bg-color;
  border-color: $border-color;
  color: $txt-color;

  &:hover {
    background-color: $bg-color-hover;
    border-color: $border-color-hover;
    color: $txt-color;
  }

  &:active {
    background-color: $bg-color-active;
    border-color: $border-color-active;
    color: $txt-color;
  }

  &:focus {
    background-color: $bg-color-focus;
    border-color: $border-color-focus;
    color: $txt-color;
  }
}

@mixin _btn($min-width, $min-height, $padding, $arrow-direction) {
  min-width: $min-width;
  min-height: $min-height;
  padding: $padding;

  @if $arrow-direction {

    $padding-side: 1em;
    $background-size: .6667em;
    $background-position-x-offset: ($padding-side - $background-size) / 2;

    @if type-of($padding) == 'list' {
      $padding-side: nth($padding, 2) * 2;
      $background-size: $padding-side * .6667;
      $background-position-x-offset: ($padding-side - $background-size) / 2;
    }

    background-size: $background-size auto;

    @if $arrow-direction == left {
      padding-left: $padding-side;
      background-position: left $background-position-x-offset top 50%;
    }

    @if $arrow-direction == right {
      padding-right: $padding-side;
      background-position: right $background-position-x-offset top 50%;
    }
  }
}

@mixin btn--block {
  display: block;
  width: 100%;
}

@mixin btn--link {
  background-color: transparent;
  border: 0;
  color: $link;
}

@mixin btn--link-inline {
  @include link-state-style($link-body-no-visited);
  display: inline;
  padding: 0;
  margin: 0;
}

// The disabled variation should always go last, so that it overrides any
// other variations.
%button--disabled[disabled] {
  // Re-set default cursor for disabled elements.
  cursor: default;
  color: color(button-disabled);

  &:hover,
  &:focus,
  &:active {
    // Override any link underlines and color changes.
    color: color(button-disabled);
  }
}
